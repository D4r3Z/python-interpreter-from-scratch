##solving the Towers of Hanoi problem with an even number of disks##
#for even algorithm: 1-2,1-3,2-3;
#for odd: 1-3,1-2,2-3
var from = [5,4,3,2,1];
var to=[];
var buf=[6];
var n=lenght(from)+lenght(to)+lenght(buf);
if (n%2==0){
    while(lenght(to) != n){
#1-2
        if(lenght(from)!=0)
        {
        if(lenght(buf)==0){
            append(buf,from[lenght(from)-1]);
            pop(from,lenght(from)-1);
        }
        else{
            if(from[lenght(from)-1]>buf[lenght(buf)-1])
            {
                append(from,buf[lenght(buf)-1]);
                pop(buf,lenght(buf)-1);
            }
            else{
                append(buf,from[lenght(from)-1]);
                pop(from,lenght(from)-1);
            };
        };
        }else
        {
            if(lenght(buf)!=0)
            {
                append(from,buf[lenght(buf)-1]);
                pop(buf,lenght(buf)-1);
            };
        };
#1-3
        if(lenght(from)!=0)
        {
        if(lenght(to)==0){
            append(to,from[lenght(from)-1]);
            pop(from,lenght(from)-1);
        }
        else{
            if(from[lenght(from)-1]>to[lenght(to)-1])
            {
            append(from,to[lenght(to)-1]);
            pop(to,lenght(to)-1);
            }
            else{
            append(to,from[lenght(from)-1]);
            pop(from,lenght(from)-1);
            };
        };
        }else
        {
            if(lenght(to)!=0)
            {
            append(from,to[lenght(to)-1]);
            pop(to,lenght(to)-1);
            };
        };
#2-3
        if(lenght(buf)!=0)
        {
        if(lenght(to)==0){
            append(to,buf[lenght(buf)-1]);
            pop(buf,lenght(buf)-1);
        }
        else{
            if(buf[lenght(buf)-1]>to[lenght(to)-1])
            {
            append(buf,to[lenght(to)-1]);
            pop(to,lenght(to)-1);
            }
            else{
            append(to,buf[lenght(buf)-1]);
            pop(buf,lenght(buf)-1);
            };
        };
        }else
        {
            if(lenght(to)!=0)
            {
            append(buf,to[lenght(to)-1]);
            pop(to,lenght(to)-1);
            };
        };
        print("FROM");
        print(from);
        print("BUF");
        print(buf);
        print("TO");
        print(to);
    };
};